@using Microsoft.AspNetCore.Components

<div class="modal fade show d-block" tabindex="-1" role="dialog" style="z-index: 1050;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p>@Message</p>
                }
                @if (ChildContent != null)
                {
                    @ChildContent
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel" disabled="@IsProcessing">
                    Cancel
                </button>
                <button type="button" class="btn btn-danger" @onclick="OnConfirm" disabled="@IsProcessing">
                    @if (IsProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        @ProcessingText
                    }
                    else
                    {
                        @ConfirmText
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Separate backdrop div -->
<div class="modal-backdrop fade show" style="z-index: 1040;" @onclick="OnCancel"></div>

@code {
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public string ProcessingText { get; set; } = "Processing...";
    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
}