@page "/characters"
@attribute [Authorize]
@using Mordecai.Web.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav

<PageTitle>Your Characters</PageTitle>

<h3>Your Characters</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    if (!characters.Any())
    {
        <div class="alert alert-info">You don't have any characters yet. Create your first one!</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-3 mb-4">
            @foreach (var c in characters.OrderByDescending(c => c.LastPlayedAt ?? c.CreatedAt))
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title mb-1">@c.Name</h5>
                            <div class="text-muted small mb-2">@c.Species</div>
                            <div class="small mb-2">Created: @c.CreatedAt.UtcDateTime.ToShortDateString()</div>
                            <div class="small mb-3">Last Played: @(c.LastPlayedAt?.UtcDateTime.ToString("g") ?? "Never")</div>
                            <div class="mt-auto">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => EnterWorld(c.Id)">Enter World</button>
                                <button class="btn btn-sm btn-outline-danger" disabled>Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <EditForm Model="this" OnValidSubmit="CreateCharacter">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="input-group mb-3" style="max-width:400px;">
            <input class="form-control" placeholder="Character Name" @bind="newCharacterName" maxlength="40" />
            <select class="form-select" @bind="newCharacterSpecies">
                @foreach (var s in speciesOptions)
                {
                    <option value="@s">@s</option>
                }
            </select>
            <button class="btn btn-success" type="submit" disabled="@isCreating">@((isCreating?"Creating...":"Create"))</button>
        </div>
    </EditForm>
}

@code {
    private bool isLoading = true;
    private bool isCreating = false;
    private string currentUserId = string.Empty;
    private List<Character> characters = new();

    private string newCharacterName = string.Empty;
    private string newCharacterSpecies = "Human";
    private readonly string[] speciesOptions = new[] { "Human", "Elf", "Dwarf", "Halfling", "Orc" };
    private const int CharacterLimit = 3; // configurable later

    protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        await LoadCharacters();
    }

    private async Task LoadCharacters()
    {
        isLoading = true;
        characters = await Db.Characters.Where(c => c.UserId == currentUserId).AsNoTracking().ToListAsync();
        isLoading = false;
    }

    private async Task CreateCharacter()
    {
        if (string.IsNullOrWhiteSpace(newCharacterName)) return;
        if (characters.Count >= CharacterLimit) return; // silently ignore for now

        isCreating = true;

        var exists = await Db.Characters.AnyAsync(c => c.UserId == currentUserId && c.Name == newCharacterName);
        if (exists)
        {
            isCreating = false; // TODO: show validation message
            return;
        }

        var character = new Character
        {
            Name = newCharacterName.Trim(),
            Species = newCharacterSpecies,
            UserId = currentUserId,
            CreatedAt = DateTimeOffset.UtcNow
        };
        Db.Characters.Add(character);
        await Db.SaveChangesAsync();

        newCharacterName = string.Empty;
        await LoadCharacters();
        isCreating = false;
    }

    private async Task EnterWorld(Guid id)
    {
        var character = await Db.Characters.FirstOrDefaultAsync(c => c.Id == id && c.UserId == currentUserId);
        if (character is null) return;

        character.LastPlayedAt = DateTimeOffset.UtcNow;
        await Db.SaveChangesAsync();

        Nav.NavigateTo($"/play/{id}");
    }
}
