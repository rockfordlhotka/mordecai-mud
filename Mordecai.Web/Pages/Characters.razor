@page "/characters"
@attribute [Authorize]
@using Mordecai.Web.Data
@using Mordecai.Web.Models
@using Mordecai.Web.Services
@using Mordecai.Web.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider Auth
@inject NavigationManager Nav
@inject IDiceService DiceService
@inject ICharacterCreationService CharacterCreationService
@inject ISkillService SkillService
@inject ICharacterService CharacterService

<PageTitle>Your Characters</PageTitle>

<h3>Your Characters</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    if (!characters.Any())
    {
        <div class="alert alert-info">You don't have any characters yet. Create your first one!</div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-3 mb-4">
            @foreach (var c in characters.OrderByDescending(c => c.LastPlayedAt ?? c.CreatedAt))
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title mb-1">@c.Name</h5>
                            <div class="text-muted small mb-2">@c.Species</div>
                            <div class="small mb-2">Created: @c.CreatedAt.UtcDateTime.ToShortDateString()</div>
                            <div class="small mb-2">Last Played: @(c.LastPlayedAt?.UtcDateTime.ToString("g") ?? "Never")</div>
                            
                            <!-- Character Attributes Summary -->
                            <div class="small mb-2">
                                <strong>Attributes (Total: @c.AttributeTotal):</strong><br/>
                                STR: @c.Physicality, DEX: @c.Dodge, END: @c.Drive<br/>
                                INT: @c.Reasoning, ITT: @c.Awareness, WIL: @c.Focus, PHY: @c.Bearing
                            </div>
                            <div class="small mb-3">
                                <strong>Health:</strong> FAT: @c.MaxFatigue, VIT: @c.MaxVitality
                            </div>
                            
                            <div class="mt-auto">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => EnterWorld(c.Id)">Enter World</button>
                                <a href="/character/@c.Id/skills" class="btn btn-sm btn-outline-info me-2">View Skills</a>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(c)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Character Creation Form -->
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Create New Character</h5>
        </div>
        <div class="card-body">
            <EditForm Model="this" OnValidSubmit="CreateCharacter">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <!-- Basic Info -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Character Name</label>
                        <input class="form-control" placeholder="Enter character name" @bind="newCharacterName" maxlength="40" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Species</label>
                        <select class="form-select" @bind="newCharacterSpecies" @bind:after="OnSpeciesChanged">
                            @foreach (var s in speciesOptions)
                            {
                                <option value="@s">@s</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Species Information -->
                @if (!string.IsNullOrEmpty(newCharacterSpecies) && newCharacterSpecies != "Human")
                {
                    <div class="alert alert-info mb-3">
                        <strong>@newCharacterSpecies Modifiers:</strong>
                        @{
                            var modifiers = SpeciesModifiers.GetAllModifiers(newCharacterSpecies)
                                .Where(kvp => kvp.Value != 0)
                                .Select(kvp => $"{kvp.Key}: {(kvp.Value > 0 ? "+" : "")}{kvp.Value}")
                                .ToArray();
                        }
                        @if (modifiers.Any())
                        {
                            @string.Join(", ", modifiers)
                        }
                        else
                        {
                            <text>No modifiers</text>
                        }
                    </div>
                }

                <!-- Attribute Generation -->
                @if (generatedAttributes != null)
                {
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Attributes (Total: @generatedAttributes.Total)</h6>
                            <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="GenerateNewAttributes">
                                ?? Reroll All
                            </button>
                        </div>
                        
                        <div class="row g-2">
                            @foreach (var attrInfo in GetAttributeInfo())
                            {
                                <div class="col-md-6 col-lg-4">
                                    <div class="card">
                                        <div class="card-body p-2">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">@attrInfo.displayName</small>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button type="button" class="btn btn-outline-secondary" 
                                                            @onclick="() => DecreaseAttribute(attrInfo.name)"
                                                            disabled="@(!CanDecreaseAttribute(attrInfo.name))">-</button>
                                                    <span class="btn btn-outline-primary disabled">@attrInfo.value</span>
                                                    <button type="button" class="btn btn-outline-secondary" 
                                                            @onclick="() => IncreaseAttribute(attrInfo.name)"
                                                            disabled="@(!CanIncreaseAttribute(attrInfo.name))">+</button>
                                                </div>
                                            </div>
                                            @{
                                                var (min, max) = CharacterCreationService.GetAttributeBounds(newCharacterSpecies, attrInfo.name);
                                            }
                                            <small class="text-muted">Range: @min - @max</small>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Health Preview -->
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="alert alert-light mb-2">
                                    <strong>Calculated Health:</strong><br/>
                                    Fatigue (FAT): @generatedAttributes.CalculatedFatigue<br/>
                                    Vitality (VIT): @generatedAttributes.CalculatedVitality
                                </div>
                            </div>
                        </div>

                        <!-- Base Attribute Skills Preview -->
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="alert alert-light mb-2">
                                    <strong>Starting Attribute Skills (Ability Score = Attribute - 5 + Level 0):</strong><br/>
                                    <div class="row">
                                        @foreach (var attrInfo in GetAttributeInfo())
                                        {
                                            var abilityScore = attrInfo.value - 5 + 0; // Level 0 initially
                                            <div class="col-md-6 col-lg-4">
                                                <small>@attrInfo.displayName: @abilityScore</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-primary" @onclick="GenerateNewAttributes">
                            ?? Generate Attributes
                        </button>
                    </div>
                }

                <!-- Create Button -->
                <div class="d-flex justify-content-end">
                    <button class="btn btn-success" type="submit" 
                            disabled="@(isCreating || generatedAttributes == null || string.IsNullOrWhiteSpace(newCharacterName))">
                        @(isCreating ? "Creating..." : "Create Character")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Delete Confirmation Dialog -->
@if (showDeleteConfirmation)
{
    <ConfirmDeleteDialog 
        Title="Delete Character"
        ConfirmText="Delete"
        ProcessingText="Deleting..."
        IsProcessing="isDeleting"
        OnConfirm="ConfirmDelete"
        OnCancel="CancelDelete">
        <p>Are you sure you want to delete <strong>@characterToDelete?.Name</strong>?</p>
        <p class="text-warning">
            <i class="fas fa-exclamation-triangle"></i>
            This action cannot be undone. All character data, skills, and progress will be permanently lost.
        </p>
    </ConfirmDeleteDialog>
}

@code {
    private bool isLoading = true;
    private bool isCreating = false;
    private bool isDeleting = false;
    private bool showDeleteConfirmation = false;
    private Character? characterToDelete = null;
    private string currentUserId = string.Empty;
    private List<Character> characters = new();

    private string newCharacterName = string.Empty;
    private string newCharacterSpecies = "Human";
    private readonly string[] speciesOptions = new[] { "Human", "Elf", "Dwarf", "Halfling", "Orc" };
    private const int CharacterLimit = 3; // configurable later

    private CharacterAttributes? generatedAttributes;
    private int originalAttributeTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await Auth.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
        await LoadCharacters();
    }

    private async Task LoadCharacters()
    {
        isLoading = true;
        characters = await Db.Characters.Where(c => c.UserId == currentUserId).AsNoTracking().ToListAsync();
        isLoading = false;
    }

    private void OnSpeciesChanged()
    {
        // Reset attributes when species changes
        generatedAttributes = null;
        originalAttributeTotal = 0;
    }

    private void GenerateNewAttributes()
    {
        generatedAttributes = CharacterCreationService.GenerateRandomAttributes(newCharacterSpecies);
        originalAttributeTotal = generatedAttributes.Total;
        StateHasChanged();
    }

    private List<(string name, string displayName, int value, Action<int> setter)> GetAttributeInfo()
    {
        if (generatedAttributes == null) return new List<(string, string, int, Action<int>)>();

        return new List<(string, string, int, Action<int>)>
        {
            ("Physicality", "STR", generatedAttributes.Physicality, v => generatedAttributes.Physicality = v),
            ("Dodge", "DEX", generatedAttributes.Dodge, v => generatedAttributes.Dodge = v),
            ("Drive", "END", generatedAttributes.Drive, v => generatedAttributes.Drive = v),
            ("Reasoning", "INT", generatedAttributes.Reasoning, v => generatedAttributes.Reasoning = v),
            ("Awareness", "ITT", generatedAttributes.Awareness, v => generatedAttributes.Awareness = v),
            ("Focus", "WIL", generatedAttributes.Focus, v => generatedAttributes.Focus = v),
            ("Bearing", "PHY", generatedAttributes.Bearing, v => generatedAttributes.Bearing = v)
        };
    }

    private bool CanIncreaseAttribute(string attributeName)
    {
        if (generatedAttributes == null) return false;

        var targetAttr = GetAttributeInfo().FirstOrDefault(x => x.name == attributeName);
        if (targetAttr.setter == null) return false;

        var (min, max) = CharacterCreationService.GetAttributeBounds(newCharacterSpecies, attributeName);
        
        // Can increase if: current value < max AND there are points to distribute from other attributes
        return targetAttr.value < max && GetAttributeInfo().Any(x => x.name != attributeName && x.value > CharacterCreationService.GetAttributeBounds(newCharacterSpecies, x.name).min);
    }

    private bool CanDecreaseAttribute(string attributeName)
    {
        if (generatedAttributes == null) return false;

        var sourceAttr = GetAttributeInfo().FirstOrDefault(x => x.name == attributeName);
        if (sourceAttr.setter == null) return false;

        var (min, max) = CharacterCreationService.GetAttributeBounds(newCharacterSpecies, attributeName);
        
        // Can decrease if: current value > min AND there are attributes that can be increased
        return sourceAttr.value > min && GetAttributeInfo().Any(x => x.name != attributeName && x.value < CharacterCreationService.GetAttributeBounds(newCharacterSpecies, x.name).max);
    }

    private void IncreaseAttribute(string attributeName)
    {
        if (!CanIncreaseAttribute(attributeName)) return;

        var attributeInfoList = GetAttributeInfo();
        var targetAttr = attributeInfoList.FirstOrDefault(x => x.name == attributeName);
        var sourceAttr = attributeInfoList
            .Where(x => x.name != attributeName)
            .Where(x => x.value > CharacterCreationService.GetAttributeBounds(newCharacterSpecies, x.name).min)
            .FirstOrDefault();

        if (targetAttr.setter != null && sourceAttr.setter != null)
        {
            targetAttr.setter(targetAttr.value + 1);
            sourceAttr.setter(sourceAttr.value - 1);
            StateHasChanged();
        }
    }

    private void DecreaseAttribute(string attributeName)
    {
        if (!CanDecreaseAttribute(attributeName)) return;

        var attributeInfoList = GetAttributeInfo();
        var sourceAttr = attributeInfoList.FirstOrDefault(x => x.name == attributeName);
        var targetAttr = attributeInfoList
            .Where(x => x.name != attributeName)
            .Where(x => x.value < CharacterCreationService.GetAttributeBounds(newCharacterSpecies, x.name).max)
            .FirstOrDefault();

        if (sourceAttr.setter != null && targetAttr.setter != null)
        {
            sourceAttr.setter(sourceAttr.value - 1);
            targetAttr.setter(targetAttr.value + 1);
            StateHasChanged();
        }
    }

    private async Task CreateCharacter()
    {
        if (string.IsNullOrWhiteSpace(newCharacterName) || generatedAttributes == null) return;
        if (characters.Count >= CharacterLimit) return; // silently ignore for now

        // Validate attributes before creating
        if (!CharacterCreationService.ValidateAttributeAdjustments(generatedAttributes, originalAttributeTotal, newCharacterSpecies))
        {
            // TODO: Show validation error
            return;
        }

        isCreating = true;

        var exists = await Db.Characters.AnyAsync(c => c.UserId == currentUserId && c.Name == newCharacterName);
        if (exists)
        {
            isCreating = false; // TODO: show validation message
            return;
        }

        var character = new Character
        {
            Name = newCharacterName.Trim(),
            Species = newCharacterSpecies,
            UserId = currentUserId,
            CreatedAt = DateTimeOffset.UtcNow,
            // Set generated attributes
            Physicality = generatedAttributes.Physicality,
            Dodge = generatedAttributes.Dodge,
            Drive = generatedAttributes.Drive,
            Reasoning = generatedAttributes.Reasoning,
            Awareness = generatedAttributes.Awareness,
            Focus = generatedAttributes.Focus,
            Bearing = generatedAttributes.Bearing,
            // Initialize health values to 0 (no damage taken)
            CurrentFatigue = 0,
            CurrentVitality = 0,
            PendingFatigueDamage = 0,
            PendingVitalityDamage = 0
        };
        
        Db.Characters.Add(character);
        await Db.SaveChangesAsync();

        // Create the 7 base attribute skills for this character
        await SkillService.CreateAttributeSkillsForCharacterAsync(character);

        // Reset form
        newCharacterName = string.Empty;
        generatedAttributes = null;
        originalAttributeTotal = 0;
        
        await LoadCharacters();
        isCreating = false;
    }

    private async Task EnterWorld(Guid id)
    {
        var character = await Db.Characters.FirstOrDefaultAsync(c => c.Id == id && c.UserId == currentUserId);
        if (character is null) return;

        character.LastPlayedAt = DateTimeOffset.UtcNow;
        await Db.SaveChangesAsync();

        Nav.NavigateTo($"/play/{id}");
    }

    private void ShowDeleteConfirmation(Character character)
    {
        characterToDelete = character;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        characterToDelete = null;
        showDeleteConfirmation = false;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (characterToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            var success = await CharacterService.DeleteCharacterAsync(characterToDelete.Id, currentUserId);
            
            if (success)
            {
                // Remove from local list
                characters.Remove(characterToDelete);
            }
            else
            {
                // TODO: Show error message to user
                // For now, just reload characters to ensure consistency
                await LoadCharacters();
            }
        }
        catch (Exception)
        {
            // TODO: Show error message to user
            // For now, just reload characters to ensure consistency
            await LoadCharacters();
        }
        finally
        {
            isDeleting = false;
            characterToDelete = null;
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }
}
