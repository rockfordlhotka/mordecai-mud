@page "/play/{characterId:guid}"
@page "/play"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Mordecai.Web.Services
@using Mordecai.Messaging.Services
@using Mordecai.Messaging.Messages
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Mordecai.Web.Data.ApplicationDbContext Db
@inject NavigationManager NavigationManager
@inject CharacterMessageBroadcastService MessageBroadcastService
@inject IGameMessagePublisher MessagePublisher
@inject GameActionService GameActionService
@using Microsoft.EntityFrameworkCore
@using Mordecai.Web.Data
@implements IDisposable

<PageTitle>Play Mordecai MUD</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-12 h-100">
            <div class="game-container h-100 d-flex flex-column">
                <div class="game-header bg-dark text-white p-2">
                    <h4 class="m-0">Mordecai MUD - @characterName (@currentUserName)</h4>
                    @if (currentRoomId.HasValue)
                    {
                        <small class="text-muted">Room ID: @currentRoomId</small>
                    }
                </div>
                
                <div class="game-output flex-grow-1 p-3 bg-black text-light overflow-auto" style="font-family: 'Courier New', monospace; font-size: 14px;" @ref="gameOutputElement">
                    @if (gameMessages.Any())
                    {
                        @foreach (var message in gameMessages)
                        {
                            <div class="game-message mb-1">@((MarkupString)message)</div>
                        }
                    }
                    else
                    {
                        <div class="welcome-message">
                            <p class="text-success">Welcome to Mordecai MUD!</p>
                            <p>A skill-based, real-time text adventure where your actions shape your character.</p>
                            <p class="text-info">Getting Started:</p>
                            <ul>
                                <li>Type <span class="text-warning">'look'</span> to examine your surroundings</li>
                                <li>Type <span class="text-warning">'help'</span> to see available commands</li>
                                <li>Type <span class="text-warning">'who'</span> to see other players online</li>
                                <li>Type <span class="text-warning">'say [message]'</span> to talk to others in the room</li>
                            </ul>
                            <p class="text-muted">Your character begins their journey here...</p>
                        </div>
                    }
                </div>
                
                <div class="game-input bg-secondary p-2">
                    <div class="input-group">
                        <span class="input-group-text bg-dark text-light">&gt;</span>
                        <input @bind="currentCommand" @bind:event="oninput" @onkeydown="OnKeyDown" type="text" 
                               class="form-control bg-dark text-light border-secondary" 
                               placeholder="Enter command..." 
                               @ref="commandInput" />
                        <button class="btn btn-outline-light" @onclick="SendCommand" disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-1"></span>
                            }
                            Send
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid? characterId { get; set; }
    private string currentUserName = "Adventurer";
    private string characterName = "Unknown";
    private string currentUserId = string.Empty;
    private string currentCommand = string.Empty;
    private bool isProcessing = false;
    private ElementReference commandInput;
    private ElementReference gameOutputElement;
    private List<string> gameMessages = new();
    private List<string> commandHistory = new();
    private int historyIndex = -1;
    private int? currentRoomId = 1; // Default starting room
    private bool isSubscribed = false;

    protected override async Task OnInitializedAsync()
    {
        // If no character ID provided, redirect to character selection
        if (characterId == null || characterId == Guid.Empty)
        {
            NavigationManager.NavigateTo("/characters");
            return;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserName = user?.Identity?.Name ?? "Adventurer";
        currentUserId = user?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

        if (characterId != Guid.Empty)
        {
            var character = await Db.Characters.AsNoTracking().FirstOrDefaultAsync(c => c.Id == characterId && c.UserId == currentUserId);
            if (character is not null)
            {
                characterName = character.Name;
                // TODO: Get current room from character data when implemented
                currentRoomId = 1; // Starting room for now
            }
            else
            {
                characterName = "(Invalid Character)";
                return;
            }
        }

        // Subscribe to messages for this character
        if (characterId.HasValue)
        {
            MessageBroadcastService.MessageReceived += OnMessageReceived;
            await MessageBroadcastService.RegisterCharacterListenerAsync(characterId.Value, currentRoomId);
            isSubscribed = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await commandInput.FocusAsync();
            AddMessage("You find yourself in the starting area of Mordecai.", "text-info");
            AddMessage("Type 'look' to examine your surroundings.", "text-muted");
            
            // Announce player joining
            if (characterId.HasValue)
            {
                var joinMessage = new PlayerJoined(characterId.Value, characterName, currentRoomId ?? 1);
                await MessagePublisher.PublishAsync(joinMessage);
            }
            
            StateHasChanged();
        }
    }

    private void OnMessageReceived(Guid targetCharacterId, string message)
    {
        // Only handle messages for this character
        if (targetCharacterId == characterId)
        {
            InvokeAsync(() =>
            {
                AddMessage(message, "text-light");
                StateHasChanged();
                ScrollToBottom();
            });
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Small delay to ensure DOM is updated
        await gameOutputElement.FocusAsync();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendCommand();
        }
        else if (e.Key == "ArrowUp")
        {
            NavigateHistory(-1);
        }
        else if (e.Key == "ArrowDown")
        {
            NavigateHistory(1);
        }
    }

    private void NavigateHistory(int direction)
    {
        if (commandHistory.Count == 0) return;

        historyIndex += direction;
        if (historyIndex < 0) historyIndex = 0;
        if (historyIndex >= commandHistory.Count) historyIndex = commandHistory.Count - 1;

        if (historyIndex >= 0 && historyIndex < commandHistory.Count)
        {
            currentCommand = commandHistory[historyIndex];
            StateHasChanged();
        }
    }

    private async Task SendCommand()
    {
        if (string.IsNullOrWhiteSpace(currentCommand) || isProcessing || !characterId.HasValue)
            return;

        isProcessing = true;
        var command = currentCommand.Trim();
        
        // Add to history
        if (!string.IsNullOrEmpty(command))
        {
            commandHistory.Add(command);
            if (commandHistory.Count > 50) // Limit history size
            {
                commandHistory.RemoveAt(0);
            }
            historyIndex = commandHistory.Count;
        }

        // Display the command
        AddMessage($"> {command}", "text-warning");

        // Process the command
        await ProcessGameCommand(command);

        currentCommand = string.Empty;
        isProcessing = false;
        
        await commandInput.FocusAsync();
        StateHasChanged();
    }

    private async Task ProcessGameCommand(string command)
    {
        if (!characterId.HasValue || !currentRoomId.HasValue) return;

        // Simulate processing delay
        await Task.Delay(100);

        var cmd = command.ToLower().Trim();
        var parts = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        
        try
        {
            switch (cmd)
            {
                case "look":
                case "l":
                    AddMessage("You are in the Tutorial Area.", "text-success");
                    AddMessage("This is a safe starting location for new adventurers. The area is well-lit and peaceful.");
                    AddMessage("Obvious exits: north, south, east, west");
                    break;
                    
                case "help":
                    AddMessage("Available Commands:", "text-info");
                    AddMessage("look/l - Examine your surroundings");
                    AddMessage("say [message] - Speak to everyone in the room");
                    AddMessage("say [target] [message] - Speak to a specific character, NPC, or mob");
                    AddMessage("ooc [message] - Speak on the out-of-character channel");
                    AddMessage("emote [action] - Perform an emotive action");
                    AddMessage("who - See who else is online");
                    AddMessage("targets - List all possible targets in the room");
                    AddMessage("north/n, south/s, east/e, west/w - Move in those directions");
                    AddMessage("quit - Leave the game");
                    break;
                    
                case "who":
                    AddMessage("Players currently online:", "text-info");
                    AddMessage($"  {currentUserName} (you)");
                    AddMessage("1 player total.");
                    break;
                    
                case "quit":
                    AddMessage("Thank you for playing Mordecai MUD!", "text-success");
                    AddMessage("Your progress has been saved.");
                    
                    // Announce player leaving
                    var disconnectMessage = new PlayerDisconnected(characterId.Value, characterName, currentRoomId.Value);
                    await MessagePublisher.PublishAsync(disconnectMessage);
                    break;
                    
                case "north":
                case "n":
                case "south":
                case "s":
                case "east":
                case "e":
                case "west":
                case "w":
                    // Simulate movement (this would be replaced with actual room navigation)
                    var direction = cmd switch
                    {
                        "n" => "north",
                        "s" => "south", 
                        "e" => "east",
                        "w" => "west",
                        _ => cmd
                    };
                    
                    // For demo purposes, simulate moving to a different room
                    var oldRoomId = currentRoomId.Value;
                    var newRoomId = direction switch
                    {
                        "north" => oldRoomId + 1,
                        "south" => Math.Max(1, oldRoomId - 1),
                        "east" => oldRoomId + 10,
                        "west" => Math.Max(1, oldRoomId - 10),
                        _ => oldRoomId
                    };

                    if (newRoomId != oldRoomId)
                    {
                        // Announce leaving current room
                        var leftMessage = new PlayerLeft(characterId.Value, characterName, oldRoomId, direction);
                        await MessagePublisher.PublishAsync(leftMessage);

                        // Update room
                        currentRoomId = newRoomId;
                        MessageBroadcastService.UpdateCharacterRoom(characterId.Value, currentRoomId);

                        // Announce arriving in new room
                        var movedMessage = new PlayerMoved(characterId.Value, characterName, oldRoomId, newRoomId, direction);
                        await MessagePublisher.PublishAsync(movedMessage);

                        AddMessage($"You go {direction}.", "text-info");
                        AddMessage($"You are now in room {newRoomId}.", "text-muted");
                    }
                    else
                    {
                        AddMessage("You cannot go that way.", "text-danger");
                    }
                    break;
                    
                case "targets":
                    var targets = await GameActionService.GetAvailableTargetsAsync(currentRoomId.Value, characterId);
                    if (targets.Any())
                    {
                        AddMessage("Available targets in this room:", "text-info");
                        foreach (var target in targets)
                        {
                            var typeDescription = target.Type switch
                            {
                                Mordecai.Messaging.Messages.TargetType.Character => "character",
                                Mordecai.Messaging.Messages.TargetType.Npc => "NPC",
                                Mordecai.Messaging.Messages.TargetType.Mob => "mob",
                                _ => "unknown"
                            };
                            var onlineStatus = target.IsOnline ? "" : " (offline)";
                            AddMessage($"  {target.Name} ({typeDescription}){onlineStatus}");
                        }
                    }
                    else
                    {
                        AddMessage("There are no other targets in this room.", "text-muted");
                    }
                    break;
                    
                default:
                    if (cmd.StartsWith("say ") && parts.Length > 1)
                    {
                        string targetName = null;
                        string message;
                        
                        // Check if this might be a targeted say command
                        if (parts.Length > 2)
                        {
                            // Try to parse as "say [target] [message]"
                            var potentialTarget = parts[1];
                            var remainingMessage = string.Join(" ", parts.Skip(2));
                            
                            // Check if the potential target exists
                            var target = await GameActionService.GetAvailableTargetsAsync(currentRoomId.Value, characterId);
                            var foundTarget = target.FirstOrDefault(t => 
                                t.Name.Equals(potentialTarget, StringComparison.OrdinalIgnoreCase) ||
                                t.Name.ToLowerInvariant().StartsWith(potentialTarget.ToLowerInvariant()));
                            
                            if (foundTarget != null)
                            {
                                targetName = potentialTarget;
                                message = remainingMessage;
                            }
                            else
                            {
                                // Not a valid target, treat as regular say with full message
                                message = string.Join(" ", parts.Skip(1));
                            }
                        }
                        else
                        {
                            // Regular say command
                            message = string.Join(" ", parts.Skip(1));
                        }

                        if (!string.IsNullOrEmpty(message))
                        {
                            var result = await GameActionService.HandleChatMessageAsync(
                                characterId.Value, 
                                characterName, 
                                currentRoomId.Value, 
                                message, 
                                ChatType.Say, 
                                targetName);
                            
                            AddMessage(result, "text-success");
                        }
                        else
                        {
                            AddMessage("Say what?", "text-warning");
                        }
                    }
                    else if (cmd.StartsWith("ooc ") && parts.Length > 1)
                    {
                        var message = string.Join(" ", parts.Skip(1));
                        if (!string.IsNullOrEmpty(message))
                        {
                            var globalChatMessage = new GlobalChatMessage(characterId.Value, characterName, message, "ooc");
                            await MessagePublisher.PublishAsync(globalChatMessage);
                            
                            AddMessage($"[OOC] You: {message}", "text-info");
                        }
                        else
                        {
                            AddMessage("Say what on OOC?", "text-warning");
                        }
                    }
                    else if (cmd.StartsWith("emote ") && parts.Length > 1)
                    {
                        var emoteText = string.Join(" ", parts.Skip(1));
                        if (!string.IsNullOrEmpty(emoteText))
                        {
                            var emoteMessage = new EmoteMessage(characterId.Value, characterName, currentRoomId.Value, emoteText);
                            await MessagePublisher.PublishAsync(emoteMessage);
                            
                            AddMessage($"{characterName} {emoteText}.", "text-cyan");
                        }
                        else
                        {
                            AddMessage("Emote what?", "text-warning");
                        }
                    }
                    else
                    {
                        AddMessage($"Unknown command: '{command}'. Type 'help' for available commands.", "text-danger");
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            AddMessage($"Error processing command: {ex.Message}", "text-danger");
        }
    }

    private void AddMessage(string message, string cssClass = "")
    {
        var formattedMessage = !string.IsNullOrEmpty(cssClass) 
            ? $"<span class='{cssClass}'>{message}</span>" 
            : message;
        
        gameMessages.Add(formattedMessage);
        
        // Limit message history to prevent memory issues
        if (gameMessages.Count > 1000)
        {
            gameMessages.RemoveRange(0, 100);
        }
    }

    public void Dispose()
    {
        if (isSubscribed && characterId.HasValue)
        {
            MessageBroadcastService.MessageReceived -= OnMessageReceived;
            _ = MessageBroadcastService.UnregisterCharacterListenerAsync(characterId.Value);
        }
    }
}

<style>
    .game-container {
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        min-height: 600px;
    }
    
    .game-output {
        font-family: 'Courier New', monospace;
        line-height: 1.4;
        white-space: pre-wrap;
        word-wrap: break-word;
        scroll-behavior: smooth;
    }
    
    .game-output::-webkit-scrollbar {
        width: 8px;
    }
    
    .game-output::-webkit-scrollbar-track {
        background: #2d3748;
    }
    
    .game-output::-webkit-scrollbar-thumb {
        background: #4a5568;
        border-radius: 4px;
    }
    
    .game-output::-webkit-scrollbar-thumb:hover {
        background: #718096;
    }

    .text-cyan {
        color: #17a2b8 !important;
    }
</style>